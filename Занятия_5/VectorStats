#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>   
#include <stdexcept> 

class VectorStats {
private:
    std::vector<double> data;

public:
    VectorStats(const std::vector<double>& vec) : data(vec) {}


    void addValue(double value) {
        data.push_back(value);
    }


    void removeValue(double value) {
        auto it = std::find(data.begin(), data.end(), value);
        if (it != data.end()) {
            data.erase(it);
        } else {
            throw std::runtime_error("Value not found");
        }
    }

    
    double mean() const {
        if (data.empty()) {
            throw std::runtime_error("empty vector");
        }
        double sum = std::accumulate(data.begin(), data.end(), 0.0);
        return sum / data.size();
    }

    double median() const {
        if (data.empty()) {
            throw std::runtime_error("empty vector");
        }
        std::vector<double> temp = data; 
        std::sort(temp.begin(), temp.end());

        size_t n = temp.size();
        if (n % 2 == 0) {

            return (temp[n/2 - 1] + temp[n/2]) / 2.0;
        } else {
            return temp[n/2];
        }
    }
};


int main() {
    VectorStats stats({1.0, 2.0, 3.0, 4.0});

    std::cout << stats.mean() << "\n";      
    std::cout << stats.median() << "\n";  

    stats.addValue(5.0);
    std::cout << stats.mean() << "\n";     
    std::cout << stats.median() << "\n"; 

    stats.removeValue(2.0);
    std::cout <<  stats.mean() << "\n";     
    std::cout  << stats.median() << "\n"; 

    return 0;
}

