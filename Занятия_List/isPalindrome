#include <iostream>
using namespace std;


struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};



ListNode* reverse(ListNode* head) {
    ListNode* prev = nullptr;
    while (head) {
        ListNode* nextTemp = head->next;
        head->next = prev;
        prev = head;
        head = nextTemp;
    }
    return prev;
}


bool isPalindrome(ListNode* head) {
    if (!head || !head->next) return true;


    ListNode* slow = head;
    ListNode* fast = head;
    while (fast->next && fast->next->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

  
    ListNode* secondHalfStart = reverse(slow->next);

  
    ListNode* firstHalf = head;
    ListNode* secondHalf = secondHalfStart;
    bool isPalin = true;
    while (secondHalf) {
        if (firstHalf->val != secondHalf->val) {
            isPalin = false;
            break;
        }
        firstHalf = firstHalf->next;
        secondHalf = secondHalf->next;
    }

  
    slow->next = reverse(secondHalfStart);

    return isPalin;
}


int main() {
   
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(2);
    head->next->next->next = new ListNode(1);

    

    bool result = isPalindrome(head);

    cout << (result ? "true" : "false") << endl;

    return 0;
}
